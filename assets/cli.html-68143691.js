import{_ as n,o as a,c as e,a as s}from"./app-4f7908e3.js";const i={},c=s(`<h1 id="vue-cli解读" tabindex="-1"><a class="header-anchor" href="#vue-cli解读" aria-hidden="true">#</a> Vue-cli解读</h1><h2 id="lerna包管理" tabindex="-1"><a class="header-anchor" href="#lerna包管理" aria-hidden="true">#</a> Lerna包管理</h2><p>所有的包都存放在packages里</p><p>包的管理操作都放在scripts里</p><h2 id="全局包的安装规则" tabindex="-1"><a class="header-anchor" href="#全局包的安装规则" aria-hidden="true">#</a> 全局包的安装规则</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  ...<span class="token punctuation">,</span>
  <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;vue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bin/vue.js&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>面对package.json里的bin字段的配置解释，bin的作用是创建命令行的包。</p><p>以上述的bin字段举例，如果是-g安装，那么安装成功以后，命令行中的Vue会找全局配置下的vue映射，而这个映射刚好就是bin/vue.js文件；如果不是-g安装，那么会安装到./node_modules/.bin下面</p><p>因此我们便有了脚手架里的相关命令行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue create <span class="token punctuation">[</span>app-name<span class="token punctuation">]</span>
vue <span class="token function">add</span> eslint
vue-cli-service serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的好处是可以将一部分的能力隐藏到npm包里，整个仓库的目录结构更加简洁</p><h2 id="便捷与规范" tabindex="-1"><a class="header-anchor" href="#便捷与规范" aria-hidden="true">#</a> 便捷与规范</h2><p>cli很重要的一个部分是插件思路，正是这些规范的插件在底层支持，使得用户需要关心的内容很少，同时这些插件也支持了很好地对用户的配置交互</p><p>脚手架里包含了两大类包：全局包和插件包</p><p>顾名思义全局包是供用户直接调用执行的命令，也就是隐藏在底层的入口，那么这些插件的支持就是在支撑功能的完善。</p><p>全局包的命名规则：cli-[name]</p><p>插件包的命名规则：cli-plugin-[name]</p><p>另外通过用户的自定义配置在run相应地命令时，init初始化执行，同时也会进行插件的注册，最后完善成一个完整的工程</p><h2 id="如何开发一个cli插件" tabindex="-1"><a class="header-anchor" href="#如何开发一个cli插件" aria-hidden="true">#</a> 如何开发一个cli插件</h2><p>遵循如下规则：</p><p>入口文件index.js</p><p>generator/promote</p>`,22),p=[c];function t(l,r){return a(),e("div",null,p)}const o=n(i,[["render",t],["__file","cli.html.vue"]]);export{o as default};
