import{_ as o,o as e,c as l,a as t}from"./app-4f7908e3.js";const i={},r=t('<h1 id="hooks下的状态管理迁移" tabindex="-1"><a class="header-anchor" href="#hooks下的状态管理迁移" aria-hidden="true">#</a> Hooks下的状态管理迁移</h1><ol><li>mobx</li></ol><ul><li>书写方便</li><li>流程不清晰、不规范</li><li>与react设计理念不同</li></ul><ol start="2"><li>redux</li></ol><ul><li>生态好，支持中间件</li><li>流程清晰action-&gt;reducer-&gt;state</li><li>书写不方便</li></ul><ol start="3"><li>context API + hooks</li></ol><ul><li>不需要额外的库</li><li>不可完全覆盖redux的能力</li></ul><p>在一个react大型项目里建议使用redux，天然地与hook兼容</p><blockquote><p>我理解：hooks确实存在useReducer + useContext的形式来处理管理状态问题，但是hooks产生的定位不是用来替代redux进行状态管理，是增强函数组件的能力，同时hooks的管理能力不及redux灵活稳定，因此大型应用还是使用redux。同时redux也不是react必须要使用的功能。如果有个项目你觉得需要状态管理，你可以自己写也可以用redux，而hooks是用来增强函数组件的能力，简化代码书写，与状态管理无关，就像你写react代码的时候用props state一样，你会思考取代状态管理吗？它就是获取状态的一种方案。</p></blockquote><p>如何自己写一个hook呢？</p>',10),s=[r];function a(c,u){return e(),l("div",null,s)}const h=o(i,[["render",a],["__file","hooks.html.vue"]]);export{h as default};
